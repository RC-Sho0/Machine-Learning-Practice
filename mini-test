{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"mini-test","provenance":[{"file_id":"1HWlXzbKTPSToEPDJLarXSE7rxFo_7xQD","timestamp":1652508343021}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"1eH9vsP8L2Nw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Câu 1\n","\n","1. Hiện thực các hàm sau để làm việc tương tự với các lớp tương tự mạng MLPClassifier\n","* linear\n","* relu, sigmoid, tanh\n","* softmax\n","* cross_entropy\n","* binary_crossentropy\n","\n"],"metadata":{"id":"79ZlTnwyIjuA"}},{"cell_type":"code","source":["def linear(X, W, b):\n","  return np.matmul(X,W) + b\n","\n","def relu(X):\n","  return max(0.0,X)\n","\n","def sigmoid(X):\n","  return 1.0/(1.0+np.exp(-X))\n","\n","\n","def tanh(x):\n","  return (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))\n","\n","def softmax(x):\n","\treturn np.exp(x)/np.exp(x).sum()\n"," \n","\n","# Các lớp khác tương tự\n","def cross_entropy(y, y_pred):\n","\treturn -np.sum(y * np.log(y_pred))\n","\n","def binary_crossentropy(y, y_pred): \n","  return -(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred)).mean()"],"metadata":{"id":"8HB7AeglImsu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Câu 2\n","1. Xây dựng mô hình mạng nơron MLPClassifier (sklearn) với các thông số tự chọn để giải bài toán phân loại hoa với tập dữ liệu IRIS của sklearn\n","\n","2. Với các tham số của mô hình thu được ở Câu 1, hãy tự xây dựng một mô hình dự báo cho mạng nơron\n"],"metadata":{"id":"E3cShiBqHqw7"}},{"cell_type":"code","source":["# Câu 2.1\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import GridSearchCV,train_test_split\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","data, target = load_iris(return_X_y=True)\n","x_train, x_test , y_train, y_test = train_test_split(data,target,test_size=.2)\n","\n","model = MLPClassifier()\n","params = {'solver':('lbfgs', 'sgd', 'adam'), 'activation': ('logistic', 'tanh', 'relu'),'hidden_layer_sizes':[(100,),(10,20,),(10,)]}\n","grid = GridSearchCV(model,params,cv=3,verbose=1)\n","grid.fit(x_train,y_train)\n","\n","print(f'Best params: {grid.best_params_}')"],"metadata":{"id":"bCvTvZajIhDz","colab":{"base_uri":"https://localhost:8080/"},"outputId":"28c08bb7-d771-4b1f-fc1e-b2f88acd4613","executionInfo":{"status":"ok","timestamp":1654150667702,"user_tz":-420,"elapsed":14154,"user":{"displayName":"Hoàng Sơn Võ Thành","userId":"13162457009128917605"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 27 candidates, totalling 81 fits\n","Best params: {'activation': 'tanh', 'hidden_layer_sizes': (100,), 'solver': 'adam'}\n"]}]},{"cell_type":"code","source":["model = MLPClassifier(hidden_layer_sizes=(100,),activation='tanh',solver='adam')\n","model.fit(x_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vxi9eE5hSZaX","executionInfo":{"status":"ok","timestamp":1654150704291,"user_tz":-420,"elapsed":479,"user":{"displayName":"Hoàng Sơn Võ Thành","userId":"13162457009128917605"}},"outputId":"6a88b4b9-27ed-423b-b7a0-78e9f60dca4e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["MLPClassifier(activation='tanh')"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["coefs = np.array(model.coefs_)\n","intercepts = np.array(model.intercepts_)\n","\n","print(\"Weight size: \")\n","for coef in coefs:\n","  print(coef.shape)\n","print('--'*40)\n","print(\"Bias size: \")\n","for interc in intercepts:\n","  print(interc.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2apyW1JpSr4x","executionInfo":{"status":"ok","timestamp":1654150707088,"user_tz":-420,"elapsed":5,"user":{"displayName":"Hoàng Sơn Võ Thành","userId":"13162457009128917605"}},"outputId":"36a7ee7b-e1e1-4d67-9b87-5f3883617cdd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Weight size: \n","(4, 100)\n","(100, 3)\n","--------------------------------------------------------------------------------\n","Bias size: \n","(100,)\n","(3,)\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uAFGMA_gHodP"},"outputs":[],"source":["# Câu 2.2\n","def forward(x,w,b):\n","  x = linear(x,w[0],b[0])\n","  x = tanh(x)\n","  x = linear(x,w[1],b[1])\n","  x = tanh(x)\n","  x = softmax(x)\n","  x = np.argmax(x,axis=1,)\n","  return x"]},{"cell_type":"code","source":["pred = forward(x_test,coefs,intercepts)\n","print(pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uNYlcTrkUvqJ","executionInfo":{"status":"ok","timestamp":1654150710265,"user_tz":-420,"elapsed":5,"user":{"displayName":"Hoàng Sơn Võ Thành","userId":"13162457009128917605"}},"outputId":"e3182a90-4009-424e-95af-2e948a8b740c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2 0 1 2 2 0 0 2 1 2 2 2 2 0 1 0 1 0 1 2 1 2 1 1 2 1 1 1 0 1]\n"]}]},{"cell_type":"code","source":["check = pred == model.predict(x_test)\n","print(f\"Match!\") if check.all() else print(f\"Not match ---- {np.sum(check == False)} wrong\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p2V5ZbSlU6X4","executionInfo":{"status":"ok","timestamp":1654150711608,"user_tz":-420,"elapsed":3,"user":{"displayName":"Hoàng Sơn Võ Thành","userId":"13162457009128917605"}},"outputId":"231bb1cd-c382-4f86-fd67-78baab0d1732"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Match!\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"g4tQTSJCliyL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["------------------------------------------------------------"],"metadata":{"id":"Pt7o3Xm0X5bo"}}]}